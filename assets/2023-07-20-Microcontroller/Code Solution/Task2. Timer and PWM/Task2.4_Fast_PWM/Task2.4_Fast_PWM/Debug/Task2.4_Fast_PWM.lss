
Task2.4_Fast_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  000001fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c82  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000baf  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000318  00000000  00000000  00001ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b7  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000023cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 30       	cpi	r26, 0x01	; 1
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	3d d0       	rcall	.+122    	; 0x180 <main>
 106:	3d c0       	rjmp	.+122    	; 0x182 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_Z8Fast_PWMv>:
  Fast_PWM();
}

void Fast_PWM(void)
{
	DDRB |= (1<<PINB5)| (1<<PINB6);// Set Pin D5 is Output
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	80 66       	ori	r24, 0x60	; 96
 10e:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1<<WGM11) | (1<<COM1A1); // WGM11, 12, 13 = Fast PWM (Mode 14). COM1A1 = Set pin on Compare Match
 110:	e0 e8       	ldi	r30, 0x80	; 128
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	82 68       	ori	r24, 0x82	; 130
 118:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11) ; // using ICR1 as TOP and Prescaler 8
 11a:	e1 e8       	ldi	r30, 0x81	; 129
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8a 61       	ori	r24, 0x1A	; 26
 122:	80 83       	st	Z, r24

	At duty cycle of 50%:
	2000 * 0.5 = 1000 = 0x3E8 -Duty Cycle
	**************************************************/
	
	ICR1 = 0x7D0; // start value for the period
 124:	80 ed       	ldi	r24, 0xD0	; 208
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 12c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	OCR1A = 0x64; // Start value for the duty cycle
 130:	84 e6       	ldi	r24, 0x64	; 100
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 138:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	OCR1B = 0x5DC;
 13c:	8c ed       	ldi	r24, 0xDC	; 220
 13e:	95 e0       	ldi	r25, 0x05	; 5
 140:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 144:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
	while(1){
		if(!(PIND & (1<<PIND0))){
			duty_cycle = duty_cycle_5_percent;
		}
		else if(!(PIND & (1<<PIND1))){
			duty_cycle = duty_cycle_50_percent;
 148:	91 e0       	ldi	r25, 0x01	; 1
		}
		switch(duty_cycle){
			case duty_cycle_5_percent:
			OCR1A = 0x64; // value for the duty cycle
 14a:	e8 e8       	ldi	r30, 0x88	; 136
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	44 e6       	ldi	r20, 0x64	; 100
 150:	50 e0       	ldi	r21, 0x00	; 0
			break;
			case duty_cycle_50_percent:
			OCR1A = 0x3E8; // value for the duty cycle
 152:	28 ee       	ldi	r18, 0xE8	; 232
 154:	33 e0       	ldi	r19, 0x03	; 3
	ICR1 = 0x7D0; // start value for the period
	OCR1A = 0x64; // Start value for the duty cycle
	OCR1B = 0x5DC;
	
	while(1){
		if(!(PIND & (1<<PIND0))){
 156:	48 99       	sbic	0x09, 0	; 9
 158:	03 c0       	rjmp	.+6      	; 0x160 <_Z8Fast_PWMv+0x56>
			duty_cycle = duty_cycle_5_percent;
 15a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
 15e:	03 c0       	rjmp	.+6      	; 0x166 <_Z8Fast_PWMv+0x5c>
		}
		else if(!(PIND & (1<<PIND1))){
 160:	49 9b       	sbis	0x09, 1	; 9
			duty_cycle = duty_cycle_50_percent;
 162:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <_edata>
		}
		switch(duty_cycle){
 166:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 16a:	88 23       	and	r24, r24
 16c:	19 f0       	breq	.+6      	; 0x174 <_Z8Fast_PWMv+0x6a>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	21 f0       	breq	.+8      	; 0x17a <_Z8Fast_PWMv+0x70>
 172:	f1 cf       	rjmp	.-30     	; 0x156 <_Z8Fast_PWMv+0x4c>
			case duty_cycle_5_percent:
			OCR1A = 0x64; // value for the duty cycle
 174:	51 83       	std	Z+1, r21	; 0x01
 176:	40 83       	st	Z, r20
			break;
 178:	ee cf       	rjmp	.-36     	; 0x156 <_Z8Fast_PWMv+0x4c>
			case duty_cycle_50_percent:
			OCR1A = 0x3E8; // value for the duty cycle
 17a:	31 83       	std	Z+1, r19	; 0x01
 17c:	20 83       	st	Z, r18
			break;
 17e:	eb cf       	rjmp	.-42     	; 0x156 <_Z8Fast_PWMv+0x4c>

00000180 <main>:
***********************/
void Fast_PWM(void);

int main(void)
{
  Fast_PWM();
 180:	c4 df       	rcall	.-120    	; 0x10a <_Z8Fast_PWMv>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
